
--Q1. Find the names of all students who are friends with someone named Gabriel.

SELECT h1.name 
FROM Friend AS f, Highschooler AS h1, Highschooler AS h2
WHERE f.ID1 = h1.ID
AND f.ID2 = h2.ID
AND h2.name = 'Gabriel';

--Q2. For every student who likes someone 2 or more grades younger than themselves, 
      return that student's name and grade, and the name and grade of the student they like.

SELECT h.name, h.grade, h2.name, h2.grade
FROM Highschooler AS h
LEFT JOIN Likes AS l
ON h.ID = l.ID1
LEFT JOIN Highschooler AS h2
ON h2.ID = l.ID2
WHERE h.grade - h2.grade >= 2;

--Q3. For every pair of students who both like each other, return the name and grade of both students. 
      Include each pair only once, with the two names in alphabetical order.

SELECT h1.name, h1.grade, h2.name, h2.grade
FROM Highschooler AS h1, Highschooler AS h2, Likes AS l1, Likes AS l2
WHERE h1.ID = l1.ID1
AND h2.ID = l1.ID2
AND l1.ID1 = l2.ID2
AND l1.ID2 = l2.ID1
AND h1.name < h2.name
ORDER BY h1.name, h2.name;

--Q4. Find all students who do not appear in the Likes table (as a student who likes or is liked) and 
return their names and grades. Sort by grade, then by name within each grade.

SELECT h.name, h.grade
FROM Highschooler AS h
WHERE h.ID not in (SELECT ID1 FROM Likes UNION SELECT ID2 FROM Likes)
ORDER BY grade, name;

--Q5. For every situation where student A likes student B, but we have no information about whom B likes 
      (that is, B does not appear as an ID1 in the Likes table), return A and B's names and grades.
      
SELECT DISTINCT h1.name, h1.grade, h2.name, h2.grade 
FROM Highschooler AS h1, Highschooler AS h2, Likes AS l1
WHERE l1.ID1 = h1.ID
AND l1.ID2 = h2.ID
AND l1.ID2 not in (SELECT ID1 FROM Likes);

--Q6. Find names and grades of students who only have friends in the same grade. Return the result sorted by grade, 
      then by name within each grade.
      
SELECT h1.name, h1.grade
FROM Friend AS f, Highschooler AS h1, Highschooler AS h2
WHERE f.ID2=h2.ID
AND f.ID1=h1.ID
GROUP BY f.ID1
HAVING SUM(ABS(h1.grade - h2.grade))=0
ORDER BY h1.grade, h1.name;

--Q7. For each student A who likes a student B where the two are not friends, find if they have a friend C in common 
      (who can introduce them!). For all such trios, return the name and grade of A, B, and C.
      
SELECT DISTINCT h1.name, h1.grade, h2.name, h2.grade, h3.name, h3.grade
FROM Highschooler AS h1, Highschooler AS h2, Highschooler AS h3, 
Friend AS f1, Friend AS f2, Likes AS l
WHERE (l.ID1 = h1.ID AND l.ID2 = h2.ID) AND l.ID2 NOT IN(
    SELECT ID2 FROM Friend WHERE ID1=l.ID1)
AND ((l.ID1 = f1.ID1 AND f1.ID2 = h3.ID) AND (l.ID2=f2.ID2 AND f2.ID1 = h3.ID));

--Q8. Find the difference between the number of students in the school and the number of different first names.

SELECT COUNT(DISTINCT ID) - COUNT(DISTINCT Name)
FROM Highschooler;

--Q9. Find the name and grade of all students who are liked by more than one other student.

SELECT h2.name, h2.grade
FROM Highschooler AS h1, Highschooler AS h2, Likes AS l
WHERE h1.ID = l.ID1
AND h2.ID = l.ID2
GROUP BY l.ID2
HAVING COUNT(l.ID1) > 1;

